/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// Layer definitions
#define BASE 0
#define NUM 1
#define SYM 2
#define NAV 3
#define FUN 4

// Combo keys
#define COMBO_LS_CTRL 13 30
#define COMBO_LS_ALT 12 30
#define COMBO_LS_GUI 11 30

#define COMBO_RS_CTRL 16 33
#define COMBO_RS_ALT 17 33
#define COMBO_RS_GUI 18 33

#define COMBO_NAV 30 31

// Auto shift
#define AS(keycode) &as LS(keycode) keycode

&mt {
   // flavor = "tap-preferred";
   // tapping_term_ms = <200>;
};

/ {
    behaviors {
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            #binding-cells = <2>;
            tapping_term_ms = <135>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_lctrl {
            timeout-ms = <50>;
            key-positions = <COMBO_LS_CTRL>;
            bindings = <&kp LCTRL>;
        };

        combo_lalt {
            timeout-ms = <50>;
            key-positions = <COMBO_LS_ALT>;
            bindings = <&kp RALT>;
        };

        combo_lgui {
            timeout-ms = <50>;
            key-positions = <COMBO_LS_GUI>;
            bindings = <&kp LGUI>;
        };

        combo_rctrl {
            timeout-ms = <50>;
            key-positions = <COMBO_RS_CTRL>;
            bindings = <&kp LCTRL>;
        };

        combo_ralt {
            timeout-ms = <50>;
            key-positions = <COMBO_RS_ALT>;
            bindings = <&kp RALT>;
        };

        combo_rgui {
            timeout-ms = <50>;
            key-positions = <COMBO_RS_GUI>;
            bindings = <&kp LGUI>;
        };

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
        
        combo_tab {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp TAB>;
        };
        
        combo_ralt {
            timeout-ms = <50>;
            key-positions = <17 16>;
            bindings = <&kp RALT>;
        };
        
        combo_lalt {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp LALT>;
        };

        combo_nav{
            timeout-ms = <300>;
            key-positions = <COMBO_NAV>;
            bindings = <&mo NAV>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
                
        // ------------------------------------------------------------------------------------------------------------
        // |  AS(Q)  |  AS(W)  |  AS(E)  |  AS(R)  |  AS(T)  |      |  AS(Y)  |  AS(U)  |  AS(I)  |  AS(O)  |  AS(P)  |
        // |  AS(A)  |  AS(S)  |  AS(D)  |  AS(F)  |  AS(G)  |      |  AS(H)  |  AS(J)  |  AS(K)  |  AS(L)  |  AS(;)  |
        // |  AS(Z)  |  AS(X)  |  AS(C)  |  AS(V)  |  AS(B)  |      |  AS(N)  |  AS(M)  |  AS(,)  |  AS(.)  |  AS(/)  |
        //                               |   SYM   |   SPC   |      |  ENTER  |   NUM   |

        default_layer {
            bindings = <
            AS(Q)   AS(W)   AS(E)   AS(R)   AS(T)       AS(Y)       AS(U)   AS(I)       AS(O)   AS(P) 
            AS(A)   AS(S)   AS(D)   AS(F)   AS(G)       AS(H)       AS(J)   AS(K)       AS(L)   AS(SEMI)
            AS(Z)   AS(X)   AS(C)   AS(V)   AS(B)       AS(N)       AS(M)   AS(COMMA)   AS(DOT) AS(SLASH)
                                    &mo SYM &kp SPC     &kp ENTER   &mo NUM
            >;
        };

        // ------------------------------------------------------------------------------------------------------------
        // |         |    7    |    8    |    9    |         |      |    =    |    +    |    -    |    *    |    /    |
        // |    0    |    4    |    5    |    6    |         |      |         |         |         |         |    ;    |
        // |         |    1    |    2    |    3    |         |      |    _    |    -    |    ,    |    .    |    /    |
        //                               |   FUN   |   SPC   |      |  ENTER  | PRESSED |

        number_layer {
            bindings = <
            &trans      &kp NUM_7   &kp NUM_8   &kp NUM_9   &trans          &kp EQUAL   &kp PLUS    &kp MINUS   &kp ASTRK   &kp FSLH 
            &kp NUM_0   &kp NUM_4   &kp NUM_5   &kp NUM_6   &trans          &trans      &trans      &trans      &trans      &trans
            &trans      &kp NUM_1   &kp NUM_2   &kp NUM_3   &trans          &kp UNDER   &kp MINUS   &kp COMMA   &kp DOT     &kp FSLH 
                                                &mo FUN     &kp SPC         &kp ENTER   &trans
            >;
        };

        // ------------------------------------------------------------------------------------------------------------
        // |         |         |         |         |         |      |   ` ~   |    @    |    &    |    |    |    ^    |
        // |         |         |         |         |         |      |   " '   |   ( )   |   { }   |   [ ]   |   < >   |
        // |         |         |         |         |         |      |    $    |    %    |    !    |    #    |    \    |
        //                               | PRESSED |   SPC   |      |  ENTER  |   FUN   | 

        symbols_layer {
            bindings = <
            &trans  &trans  &trans  &trans  &trans          &as TILDE GRAVE &kp N2          &kp N7          &kp PIPE        &kp N6
            &trans  &trans  &trans  &trans  &trans          &as APOS DQT    &as RPAR LPAR   &as RBRC LBRC   &as RBKT LBKT   &as GT LT
            &trans  &trans  &trans  &trans  &trans          &kp N4          &kp N5          &kp N1          &kp N3          &kp BSLH
                                    &trans  &kp SPC         &kp ENTER       &mo FUN
            >;
        };

        // ------------------------------------------------------------------------------------------------------------
        // |         |         |         |         |         |      |   Redo  |  Paste  |  Copy   |   Cut   |  Undo   |
        // |         |         |         |         |         |      |    <    |    v    |    ^    |    >    |  Caps   |
        // |         |         |         |         |         |      |   Home  | Pg down |  Pg up  |   End   |  Insert |
        //                               |  COMBO  |  COMBO  |      |         |         |

        nav_layer {
            bindings = <
            &trans  &trans  &trans  &trans  &trans          &kp K_REDO  &kp K_PASTE &kp K_COPY  &kp K_CUT   &kp K_UNDO
            &trans  &trans  &trans  &trans  &trans          &kp LEFT    &kp DOWN    &kp UP      &kp RIGHT   &kp 
            &trans  &trans  &trans  &trans  &trans          &kp HOME    &kp PG_DN   &kp PG_UP   &kp END     &kp INSERT
                                    &trans  &trans          &trans      &trans
            >;
        };

        // ------------------------------------------------------------------------------------------------------------
        // |   F12   |    F7   |    F8   |    F9   |  PrtScn |      |   BT0   |   BT3   |   BTR   |         |         |
        // |   F11   |    F4   |    F5   |    F6   |         |      |   BT1   |   BT4   |         |         |         |
        // |   F10   |    F1   |    F2   |    F3   |         |      |   BT2   |   BT5   |         |         |         |
        //                               | PRESSED |         |      |         | PRESSED |

        fun_layer {
            bindings = <
            &kp F12 &kp F7  &kp F8  &kp F9  &kp PSCRN       &bt BT_SEL 0    &bt BT_SEL 3    &bt BT_CLR  &trans  &trans
            &kp F11 &kp F4  &kp F5  &kp F6  &trans          &bt BT_SEL 1    &bt BT_SEL 4    &trans      &trans  &trans
            &kp F10 &kp F1  &kp F2  &kp F3  &trans          &bt BT_SEL 2    &bt BT_SEL 5    &trans      &trans  &trans
                                    &trans  &trans          &trans          &trans
            >;
        };
	};
};
