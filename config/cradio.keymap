/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// Layer definitions
#define BASE 0
#define NUM 1
#define SYM 2
#define NAV 3
#define FUN 4

// Combo keys
#define COMBO_NAV 30 31

&mt {
   // flavor = "tap-preferred";
   // tapping_term_ms = <200>;
};

/ {
    behaviors {
        dk: dual_key {
            compatible = "zmk,behavior-hold-tap";
            label = "DUAL_KEY";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <400>;
            quick-tap-ms = <150>;
            flavor = "tap-unless-interrupted";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
        
        combo_tab {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp TAB>;
        };

        combo_nav{
            timeout-ms = <50>;
            key-positions = <COMBO_NAV>;
            bindings = <&mo NAV>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
                
        // ------------------------------------------------------------------------------------------------------------
        // |    Q    |    W    |    E    |    R    |    T    |      |    Y    |    U    |    I    |    O    |    P    |
        // |    A    |    S    |    D    |    F    |    G    |      |    H    |    J    |    K    |    L    |    ;    |
        // |    Z    |    X    |    C    |    V    |    B    |      |    N    |    M    |    ,    |    .    |    /    |
        //                               |   SYM   |   SPC   |      |  ENTER  |   NUM   |

        default_layer {
            bindings = <
            &kp Q       &kp W       &kp E       &kp R           &kp T           &kp Y       &kp U           &kp I       &kp O       &kp P
            &hm LGUI A  &hm RALT S  &hm LCTRL D &hm LSHIFT F    &kp G           &kp H       &hm RSHIFT J    &hm RCTRL K &hm RALT L  &hm RGUI SEMI
            &kp Z       &kp X       &kp C       &kp V           &kp B           &kp N       &kp M           &kp COMMA   &kp DOT     &kp SLASH
                                                &mo SYM         &kp SPC         &kp ENTER   &mo NUM
            >;
        };

        // ------------------------------------------------------------------------------------------------------------
        // |         |    7    |    8    |    9    |         |      |    =    |    +    |    -    |    *    |    /    |
        // |    0    |    4    |    5    |    6    |         |      |  BSPC   |   DEL   |         |         |    ;    |
        // |         |    1    |    2    |    3    |         |      |    _    |    -    |    ,    |    .    |    /    |
        //                               |   FUN   |   SPC   |      |  ENTER  | PRESSED |

        number_layer {
            bindings = <
            &trans      &kp NUM_7   &kp NUM_8   &kp NUM_9   &trans          &kp EQUAL   &kp PLUS    &kp MINUS   &kp ASTRK   &kp FSLH 
            &kp NUM_0   &kp NUM_4   &kp NUM_5   &kp NUM_6   &trans          &kp BSPC    &kp DEL     &trans      &trans      &trans
            &trans      &kp NUM_1   &kp NUM_2   &kp NUM_3   &trans          &kp UNDER   &kp MINUS   &kp COMMA   &kp DOT     &kp FSLH 
                                                &mo FUN     &kp SPC         &kp ENTER   &trans
            >;
        };

        // ------------------------------------------------------------------------------------------------------------
        // |         |         |         |         |         |      |   ` ~   |    @    |    &    |    |    |    ^    |
        // |         |         |         |         |         |      |   " '   |   ( )   |   { }   |   [ ]   |   < >   |
        // |         |         |         |         |         |      |    $    |    %    |    !    |    #    |    \    |
        //                               | PRESSED |   SPC   |      |  ENTER  |   FUN   | 

        symbols_layer {
            bindings = <
            &trans  &trans  &trans  &trans  &trans          &dk TILDE GRAVE &kp N2          &kp N7          &kp PIPE        &kp N6
            &trans  &trans  &trans  &trans  &trans          &dk APOS DQT    &dk RPAR LPAR   &dk RBRC LBRC   &dk RBKT LBKT   &dk GT LT
            &trans  &trans  &trans  &trans  &trans          &kp N4          &kp N5          &kp N1          &kp N3          &kp BSLH
                                    &trans  &kp SPC         &kp ENTER       &mo FUN
            >;
        };

        // ------------------------------------------------------------------------------------------------------------
        // |         |         |         |         |         |      |   Redo  |  Paste  |  Copy   |   Cut   |  Undo   |
        // |         |         |         |         |         |      |    <    |    v    |    ^    |    >    |  Caps   |
        // |         |         |         |         |         |      |   Home  | Pg down |  Pg up  |   End   |  Insert |
        //                               |  COMBO  |  COMBO  |      |         |         |

        nav_layer {
            bindings = <
            &trans  &trans  &trans  &trans  &trans          &kp K_REDO  &kp K_PASTE &kp K_COPY  &kp K_CUT   &kp K_UNDO
            &trans  &trans  &trans  &trans  &trans          &kp LEFT    &kp DOWN    &kp UP      &kp RIGHT   &kp CAPS
            &trans  &trans  &trans  &trans  &trans          &kp HOME    &kp PG_DN   &kp PG_UP   &kp END     &kp INSERT
                                    &trans  &trans          &trans      &trans
            >;
        };

        // ------------------------------------------------------------------------------------------------------------
        // |   F12   |    F7   |    F8   |    F9   |  PrtScn |      |   BT0   |   BT3   |   BTR   |         |         |
        // |   F11   |    F4   |    F5   |    F6   |         |      |   BT1   |   BT4   |         |         |         |
        // |   F10   |    F1   |    F2   |    F3   |         |      |   BT2   |   BT5   |         |         |         |
        //                               | PRESSED |         |      |         | PRESSED |

        fun_layer {
            bindings = <
            &kp F12 &kp F7  &kp F8  &kp F9  &kp PSCRN       &bt BT_SEL 0    &bt BT_SEL 3    &bt BT_CLR  &trans  &trans
            &kp F11 &kp F4  &kp F5  &kp F6  &trans          &bt BT_SEL 1    &bt BT_SEL 4    &trans      &trans  &trans
            &kp F10 &kp F1  &kp F2  &kp F3  &trans          &bt BT_SEL 2    &bt BT_SEL 5    &trans      &trans  &trans
                                    &trans  &trans          &trans          &trans
            >;
        };
	};
};
