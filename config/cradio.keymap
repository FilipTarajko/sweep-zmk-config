/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


    // KEY NUMBERS
    // ---------------------------------------------------------------------------------------------------------
    // |    0    |    1    |    2    |    3    |    4   |      |    5   |    6   |    7    |    8    |    9    |
    // |   10    |   11    |   12    |   13    |   14   |      |   15   |   16   |   17    |   18    |   19    |
    // |   20    |   21    |   22    |   23    |   24   |      |   25   |   26   |   27    |   28    |   29    |
    //                               |   30    |   31   |      |   32   |   33   |

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// Layer definitions
#define DEF 0
#define NUM 1
#define SYM 2
#define NAV 3
#define CTR 4
#define FUN 5
#define ANKI 6

// Combo timeout
#define COMBO_TIMEOUT 40

// Combo keys
#define COMBO_NAV 30 31
#define COMBO_CTR 32 33
#define COMBO_ANKI 26 27 28 29
#define COMBO_BT_CLR 0 10 20 9 19 29
#define COMBO_BT_PRV 0 10 20 15
#define COMBO_BT_NXT 0 10 20 18

// Thumb keys
#define LEFT_THUMB_KEYS 30 31
#define RIGHT_THUMB_KEYS 32 33

// Halve keys
#define LEFT_SIDE_KEYS 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 LEFT_THUMB_KEYS
#define RIGHT_SIDE_KEYS 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 RIGHT_THUMB_KEYS


/ {
    behaviors {
        dk: dual_key {
            compatible = "zmk,behavior-hold-tap";
            label = "DUAL_KEY";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            bindings = <&kp>, <&kp>;
        };

        lhm: left_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_HOMEROW_MODS";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <500>;
            quick-tap-ms = <150>;
            global-quick-tap-ms = <125>;
            hold-trigger-key-positions = <RIGHT_SIDE_KEYS LEFT_THUMB_KEYS>;
            hold-trigger-on-release;
            bindings = <&kp>, <&kp>;
        };

        rhm: right_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_HOMEROW_MODS";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <500>;
            quick-tap-ms = <150>;
            global-quick-tap-ms = <125>;
            hold-trigger-key-positions = <LEFT_SIDE_KEYS RIGHT_THUMB_KEYS>;
            hold-trigger-on-release;
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <3 4>;
            bindings = <&kp ESC>;
        };
        
        combo_tab {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <13 14>;
            bindings = <&kp TAB>;
        };

        combo_nav{
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <COMBO_NAV>;
            bindings = <&mo NAV>;
        };

        combo_ctr{
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <COMBO_CTR>;
            bindings = <&mo CTR>;
        };

        combo_anki{
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <COMBO_ANKI>;
            bindings = <&tog ANKI>;
        };

        combo_bt_clr{
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <COMBO_BT_CLR>;
            bindings = <&bt BT_CLR>;
        };

        combo_bt_prv{
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <COMBO_BT_PRV>;
            bindings = <&bt BT_PRV>;
        };

        combo_bt_nxt{
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <COMBO_BT_NXT>;
            bindings = <&bt BT_NXT>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
                
        // ------------------------------------------------------------------------------------------------------------
        // |    Q    |    W    |    E    |    R    |    T    |      |    Y    |    U    |    I    |    O    |    P    |
        // |    A    |    S    |    D    |    F    |    G    |      |    H    |    J    |    K    |    L    |    ;    |
        // |    Z    |    X    |    C    |    V    |    B    |      |    N    |    M    |    ,    |    .    |    /    |
        //                               |   SYM   |   SPC   |      |  ENTER  |   NUM   |

        default_layer {
            bindings = <
            &kp Q       &kp W       &kp E           &kp R           &kp T              &kp Y       &kp U           &kp I           &kp O             &kp P
            &lhm LGUI A &lhm RALT S &lhm LCTRL D    &lhm LSHIFT F   &kp G              &kp H       &rhm RSHIFT J   &rhm RCTRL K    &rhm RALT L       &rhm RGUI SEMI
            &kp Z       &lhm LALT X &kp C           &kp V           &kp B              &kp N       &kp M           &kp COMMA       &rhm LALT DOT     &kp SLASH
                                                    &mo SYM         &kp SPC            &kp ENTER   &mo NUM
            >;
        };

        // ------------------------------------------------------------------------------------------------------------
        // |         |    7    |    8    |    9    |         |      |    =    |    +    |    -    |    *    |    /    |
        // |    0    |    4    |    5    |    6    |         |      |  BSPC   |   DEL   |         |         |    ;    |
        // |         |    1    |    2    |    3    |         |      |    _    |    -    |    ,    |    .    |    /    |
        //                               |   FUN   |   SPC   |      |  ENTER  | PRESSED |

        number_layer {
            bindings = <
            &trans      &kp NUM_7   &kp NUM_8   &kp NUM_9   &trans          &kp EQUAL   &kp PLUS    &kp MINUS   &kp ASTRK   &kp FSLH
            &kp NUM_0   &kp NUM_4   &kp NUM_5   &kp NUM_6   &trans          &kp BSPC    &kp DEL     &trans      &trans      &trans
            &trans      &kp NUM_1   &kp NUM_2   &kp NUM_3   &trans          &kp UNDER   &kp MINUS   &kp COMMA   &kp DOT     &kp FSLH 
                                                &mo FUN     &trans          &trans      &trans
            >;
        };

        // ------------------------------------------------------------------------------------------------------------
        // |         |         |         |         |         |      |   ` ~   |    @    |    &    |    |    |    ^    |
        // |         |         |         |         |         |      |   " '   |   ( )   |   { }   |   [ ]   |   < >   |
        // |         |         |         |         |         |      |    $    |    %    |    !    |    #    |    \    |
        //                               | PRESSED |   SPC   |      |  ENTER  |   FUN   | 

        symbol_layer {
            bindings = <
            &trans  &trans  &trans  &trans  &trans          &dk TILDE GRAVE &kp AT          &kp AMPS        &kp PIPE        &kp CARET
            &trans  &trans  &trans  &trans  &trans          &dk APOS DQT    &dk RPAR LPAR   &dk RBRC LBRC   &dk RBKT LBKT   &dk GT LT
            &trans  &trans  &trans  &trans  &trans          &kp DOLLAR      &kp PERCENT     &kp EXCL        &kp HASH        &kp BSLH
                                    &trans  &trans          &trans          &mo FUN
            >;
        };

        // ------------------------------------------------------------------------------------------------------------
        // |         |         |         |         |         |      |   Redo  |  Paste  |  Copy   |   Cut   |  Undo   |
        // |         |         |         |         |         |      |    ←    |    ↓    |    ↑    |    →    |  Caps   |
        // |         |         |         |         |         |      |   Home  | Pg down |  Pg up  |   End   |  Insert |
        //                               |  COMBO  |  COMBO  |      |         |         |

        navigation_layer {
            bindings = <
            &trans  &trans  &trans  &trans  &trans          &kp K_REDO  &kp K_PASTE &kp K_COPY  &kp K_CUT   &kp K_UNDO
            &trans  &trans  &trans  &trans  &trans          &kp LEFT    &kp DOWN    &kp UP      &kp RIGHT   &kp CAPS
            &trans  &trans  &trans  &trans  &trans          &kp HOME    &kp PG_DN   &kp PG_UP   &kp END     &kp INSERT
                                    &trans  &trans          &trans      &trans
            >;
        };

        // Everything is gui modified
        // ----------------------------------------------------------------------------------------------------------------
        // |         |         |         |         |         |          |         |         |         |         |         |
        // |    0    |    4    |  lCTRL  |  SHIFT  |         |          |    ←   |    ↓    |    ↑    |    →    |         |
        // |         |    1    |    2    |    3    |         |          |         |         |         |         |         |
        //                               |         |         |          |  COMBO  |  COMBO  |

        control_layer {
            bindings = <
            &none           &trans          &trans          &trans          &trans          &trans          &trans        &trans      &trans          &trans
            &kp LG(NUM_0)   &kp LG(NUM_4)   &kp LCTRL       &kp LSHIFT      &trans          &kp LG(LEFT)    &kp LG(DOWN)  &kp LG(UP)  &kp LG(RIGHT)   &trans
            &none           &kp LG(NUM_1)   &kp LG(NUM_2)   &kp LG(NUM_3)   &trans          &trans          &trans        &trans      &trans          &trans
                                                            &trans          &trans          &trans          &trans
            >;
        };

        // -------------------------------------------------------------------------------------------------------------------
        // |   F12   |    F7   |    F8   |    F9   |  PrtScn |            |   C_RW   | vol on/off   |         |  C_FF    |   |
        // |   F11   |    F4   |    F5   |    F6   |         |            | med prev |   vol-       |   vol+  | med next |   |
        // |   F10   |    F1   |    F2   |    F3   |         |            |          | media p/pause|         |          |   |
        //                               | PRESSED |         |            |          | PRESSED      |


        function_layer {
            bindings = <
            &kp F12 &kp F7  &kp F8  &kp F9  &kp PSCRN              &kp C_RW    &kp C_MUTE        &trans          &kp C_FF    &trans
            &kp F11 &kp F4  &kp F5  &kp F6  &trans                 &kp C_PREV  &kp C_VOL_DN      &kp C_VOL_UP    &kp C_NEXT  &trans
            &kp F10 &kp F1  &kp F2  &kp F3  &trans                 &trans      &kp C_PLAY_PAUSE  &trans          &trans      &trans
                                    &trans  &trans                 &trans      &trans
            >;
        };

        // ------------------------------------------------------------------------------------------------------------
        // | &tog ANKI |        |    T   |   Y    |K_REDO|         |K_REDO |   Y   |   T   |     |     |
        // |           |    1   |    2   | SPACE  |  4   |         |   4   | SPACE |   2   |  1  |     |
        // |           |        |    B   |   S    |K_UNDO|         |K_UNDO |   S   |   B   |     |     |
        //                               | SPACE  |      |         |       | SPACE |

        anki_layer {
            bindings = <
            &tog ANKI &none      &kp T      &kp Y      &kp (K_REDO)       &kp (K_REDO)  &kp Y      &kp T      &none      &none
            &none     &kp NUM_1  &kp NUM_2  &kp SPC    &kp NUM_4          &kp NUM_4     &kp SPC    &kp NUM_2  &kp NUM_1  &none
            &none     &none      &kp B      &kp S      &kp (K_UNDO)       &kp (K_UNDO)  &kp S      &kp B      &none      &none
                                            &kp SPC    &none              &none         &kp SPC
            >;
        };
	};
};
